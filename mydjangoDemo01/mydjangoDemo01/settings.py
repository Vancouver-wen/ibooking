"""
Django settings for mydjangoDemo01 project.

Generated by 'django-admin startproject' using Django 2.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'cc=x0i+)@ewlrqcysu^z%y+b13k$%-l^7&3y&eiz0fj5$n*4ye'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    "10.177.69.90",
    "127.0.0.1",
    "0.0.0.0",
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    #'djcelery',
    # https://blog.csdn.net/weixin_42782150/article/details/123212604 使用django-apscheduler插件实现定时任务
    'django_apscheduler',     # 新加入的定时任务插件django-apscheduler
    # django_apscheduler的运行和django项目的运行是相互独立的，即使django项目停止，django_apscheduler也会继续运行
    'library',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'mydjangoDemo01.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'mydjangoDemo01.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

DATABASES = {
    # 'default': {
    #     'ENGINE': 'django.db.backends.sqlite3',
    #     'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    # }
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'HOST' : '10.177.69.90', #不能有多余的空格
        'PORT' : 3306 ,
        'USER': 'root',
        # 'PASSWORD' : 'sqX2023@',
        'PASSWORD' : '123456',
        'NAME': 'library',
    }
    # 'default': {
    #     'ENGINE': 'django.db.backends.mysql',
    #     'HOST' : '127.0.0.1', #不能有多余的空格
    #     'PORT' : 3306 ,
    #     'USER': 'root',
    #     'PASSWORD' : 'password',
    #     'NAME': 'library',
    # }
}


# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

APPEND_SLASH=False

SESSIOH_COOKIE_AGE=60*30 #30分钟
SESSION_EXPIRE_AT_BROWSER_CLOSE=True #浏览器关闭是 session失效


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = '/static/' #静态目录 默认在app下

#工程项目下 设置
# STATICFILES_DIRS=[
#     os.path.join(BASE_DIR,'static'),
# ]


'''在 setting 中编写 celery代码'''
# #from celery import Celery

# # import djcelery
# # djcelery.setup_loader() # 重新加载 celery



# # Broker配置，使用Redis作为消息中间件
# BROKER_URL = 'redis://127.0.0.1:6379/0' #任务存放的库
# #redis默认有十几个库，想用哪个就 /数字

# #指定导入的任务模块，可以指定多个
# CELERY_IMPORTS = (     
#    'library.tasks', #当前的app是library
# )

# # 时区配置
# CELERY_TIMEZONE='Asia/Shanghai'   

# # 调度器
# CELERY_SCHEDULER="djcelery.schedulers.DatabaseScheduler"

# '''
# # BACKEND配置，这里使用redis
# CELERY_RESULT_BACKEND = 'redis://127.0.0.1:6379/0' 

# # 结果序列化方案
# CELERY_RESULT_SERIALIZER = 'json' 
 
# # 任务结果过期时间，秒
# CELERY_TASK_RESULT_EXPIRES = 60 * 60 * 24 
 
# '''

